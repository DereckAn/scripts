import { APPS } from "@/data/apps";
import { App, OperatingSystem, ScriptConfig } from "@/types/script-generator";

export function generateInstallScript(config: ScriptConfig): string {
  const { os, selectedApps, options } = config;
  const selectedAppData = APPS.filter((app) => selectedApps.includes(app.id));

  let script = generateScriptHeader(os);

  // Add system update
  if (options.updateSystem) {
    script += generateSystemUpdate(os);
  }

  // Add backup creation
  if (options.createBackup) {
    script += generateBackupSection(os);
  }

  // Check and install package managers
  script += generatePackageManagerSetup(os);

  // Install applications
  script += generateApplicationInstalls(
    selectedAppData,
    os,
    options.showProgress
  );

  // Install Oh My Zsh if selected
  if (options.installOhMyZsh) {
    script += generateOhMyZshInstall(os);
  }

  // Add post-install configuration
  if (options.configureDotfiles) {
    script += generateDotfilesConfiguration(os);
  }

  script += generateScriptFooter();

  return script;
}

function generateScriptHeader(os: OperatingSystem): string {
  const osName = {
    macos: "macOS",
    ubuntu: "Ubuntu/Debian",
    fedora: "Fedora",
    arch: "Arch Linux",
  }[os];

  return `#!/bin/bash

# Installation Script for ${osName}
# Generated by My Scripts UI
# $(date)

# Color codes for output
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
PURPLE='\\033[0;35m'
CYAN='\\033[0;36m'
NC='\\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "\${BLUE}[INFO]\${NC} $1"
}

print_success() {
    echo -e "\${GREEN}[SUCCESS]\${NC} $1"
}

print_warning() {
    echo -e "\${YELLOW}[WARNING]\${NC} $1"
}

print_error() {
    echo -e "\${RED}[ERROR]\${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check installation status
check_install() {
    if eval "$1" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

echo -e "\${PURPLE}========================================\${NC}"
echo -e "\${PURPLE}  My Scripts UI - Installation Script  \${NC}"
echo -e "\${PURPLE}  Target OS: ${osName}                  \${NC}"
echo -e "\${PURPLE}========================================\${NC}"
echo

`;
}

function generateSystemUpdate(os: OperatingSystem): string {
  const updateCommands = {
    macos: `print_status "Updating Homebrew..."
if command_exists brew; then
    brew update && brew upgrade
    if [ $? -eq 0 ]; then
        print_success "Homebrew updated successfully"
    else
        print_warning "Homebrew update failed, continuing..."
    fi
else
    print_warning "Homebrew not found, skipping update"
fi`,
    ubuntu: `print_status "Updating system packages..."
sudo apt update && sudo apt upgrade -y
if [ $? -eq 0 ]; then
    print_success "System updated successfully"
else
    print_error "System update failed"
    exit 1
fi`,
    fedora: `print_status "Updating system packages..."
sudo dnf update -y
if [ $? -eq 0 ]; then
    print_success "System updated successfully"
else
    print_error "System update failed"
    exit 1
fi`,
    arch: `print_status "Updating system packages..."
sudo pacman -Syu --noconfirm
if [ $? -eq 0 ]; then
    print_success "System updated successfully"
else
    print_error "System update failed"
    exit 1
fi`,
  };

  return `# System Update
${updateCommands[os]}
echo

`;
}

function generateBackupSection(os: OperatingSystem): string {
  return `# Create Backup
print_status "Creating backup of important configuration files..."
BACKUP_DIR="$HOME/scripts-backup-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"

# Backup common config files
[ -f "$HOME/.bashrc" ] && cp "$HOME/.bashrc" "$BACKUP_DIR/"
[ -f "$HOME/.zshrc" ] && cp "$HOME/.zshrc" "$BACKUP_DIR/"
[ -f "$HOME/.gitconfig" ] && cp "$HOME/.gitconfig" "$BACKUP_DIR/"
[ -d "$HOME/.ssh" ] && cp -r "$HOME/.ssh" "$BACKUP_DIR/"

print_success "Backup created at $BACKUP_DIR"
echo

`;
}

function generatePackageManagerSetup(os: OperatingSystem): string {
  if (os === "macos") {
    return `# Check and install Homebrew
if ! command_exists brew; then
    print_status "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Add Homebrew to PATH
    if [[ $(uname -m) == "arm64" ]]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    else
        echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/usr/local/bin/brew shellenv)"
    fi
    
    if command_exists brew; then
        print_success "Homebrew installed successfully"
        print_status "You can run 'brew help' for more information: https://docs.brew.sh"
    else
        print_error "Homebrew installation failed"
        exit 1
    fi
else
    print_success "Homebrew is already installed"
fi
echo

`;
  } else if (os === "arch") {
    return `# Check and install AUR helper (yay)
if ! command_exists yay; then
    print_status "Installing yay AUR helper..."
    sudo pacman -S --needed git base-devel --noconfirm
    cd /tmp
    git clone https://aur.archlinux.org/yay.git
    cd yay
    makepkg -si --noconfirm
    cd ~
    rm -rf /tmp/yay
    
    if command_exists yay; then
        print_success "yay installed successfully"
    else
        print_warning "yay installation failed, some AUR packages may not be available"
    fi
else
    print_success "yay is already installed"
fi
echo

`;
  }

  return "";
}

function generateApplicationInstalls(
  apps: App[],
  os: OperatingSystem,
  showProgress: boolean
): string {
  let script = `# Application Installation
print_status "Starting application installation..."
echo

`;

  apps.forEach((app) => {
    const installConfig = app.install[os];
    if (!installConfig) return;

    script += `# Install ${app.name}
print_status "Installing ${app.name}..."
`;

    if (app.checkInstall) {
      script += `if check_install "${app.checkInstall}"; then
    print_success "${app.name} is already installed"
else
`;
    }

    // Generate install command based on package manager
    if ("homebrew" in installConfig && installConfig.homebrew) {
      script += `    brew install ${installConfig.homebrew}`;
    } else if ("cask" in installConfig && installConfig.cask) {
      script += `    brew install --cask ${installConfig.cask}`;
    } else if ("apt" in installConfig && installConfig.apt) {
      script += `    sudo apt install -y ${installConfig.apt}`;
    } else if ("snap" in installConfig && installConfig.snap) {
      script += `    sudo snap install ${installConfig.snap}`;
    } else if ("dnf" in installConfig && installConfig.dnf) {
      script += `    sudo dnf install -y ${installConfig.dnf}`;
    } else if ("pacman" in installConfig && installConfig.pacman) {
      script += `    sudo pacman -S --noconfirm ${installConfig.pacman}`;
    } else if ("aur" in installConfig && installConfig.aur) {
      script += `    yay -S --noconfirm ${installConfig.aur}`;
    } else if (installConfig.command) {
      script += `    ${installConfig.command}`;
    }

    script += `
    if [ $? -eq 0 ]; then
        print_success "${app.name} installed successfully"
    else
        print_error "Failed to install ${app.name}"
    fi
`;

    if (app.checkInstall) {
      script += `fi
`;
    }

    // Add post-install commands
    if (app.postInstall && app.postInstall[os]) {
      script += `
# Post-install configuration for ${app.name}
${app.postInstall[os].map((cmd) => `${cmd}`).join("\n")}
`;
    }

    script += `echo
`;
  });

  return script;
}

function generateOhMyZshInstall(os: OperatingSystem): string {
  return `# Oh My Zsh Installation
print_status "Installing Oh My Zsh with Powerlevel10k theme..."

# Check if Oh My Zsh is already installed
if [ -d "$HOME/.oh-my-zsh" ]; then
    print_success "Oh My Zsh is already installed"
else
    # Install Oh My Zsh
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    
    if [ $? -eq 0 ]; then
        print_success "Oh My Zsh installed successfully"
    else
        print_error "Error installing Oh My Zsh"
        exit 1
    fi
fi

# Install Powerlevel10k theme
print_status "Installing Powerlevel10k theme..."
if [ ! -d "\${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k" ]; then
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git \${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
    
    # Update .zshrc to use Powerlevel10k
    if [ -f "$HOME/.zshrc" ]; then
        sed -i'' -e 's/ZSH_THEME="robbyrussell"/ZSH_THEME="powerlevel10k\\/powerlevel10k"/' "$HOME/.zshrc"
        if ! grep -q 'ZSH_THEME="powerlevel10k/powerlevel10k"' "$HOME/.zshrc"; then
            echo 'ZSH_THEME="powerlevel10k/powerlevel10k"' >> "$HOME/.zshrc"
        fi
    fi
    print_success "Powerlevel10k theme installed"
else
    print_success "Powerlevel10k theme is already installed"
fi

# Install Oh My Zsh plugins
print_status "Installing Oh My Zsh plugins..."

# zsh-autosuggestions
if [ ! -d "\${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions" ]; then
    git clone https://github.com/zsh-users/zsh-autosuggestions \${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
fi

# zsh-syntax-highlighting
if [ ! -d "\${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting" ]; then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git \${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
fi

# zsh-history-substring-search
if [ ! -d "\${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-history-substring-search" ]; then
    git clone https://github.com/zsh-users/zsh-history-substring-search \${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-history-substring-search
fi

# Update plugins in .zshrc
if [ -f "$HOME/.zshrc" ]; then
    sed -i'' -e 's/plugins=(git)/plugins=(git jump zsh-autosuggestions sublime zsh-history-substring-search jsontools zsh-syntax-highlighting zsh-interactive-cd)/' "$HOME/.zshrc"
fi

print_success "Oh My Zsh plugins installed successfully"
print_success "Please restart your terminal for changes to take effect"
echo

`;
}

function generateDotfilesConfiguration(os: OperatingSystem): string {
  return `# Dotfiles Configuration
print_status "Configuring dotfiles..."

# Create useful aliases
if [ -f "$HOME/.zshrc" ]; then
    echo "
# Custom aliases added by My Scripts UI
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
" >> "$HOME/.zshrc"
fi

if [ -f "$HOME/.bashrc" ]; then
    echo "
# Custom aliases added by My Scripts UI
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
" >> "$HOME/.bashrc"
fi

print_success "Dotfiles configured successfully"
echo

`;
}

function generateScriptFooter(): string {
  return `# Installation Complete
echo -e "\${PURPLE}========================================\${NC}"
echo -e "\${GREEN}  Installation completed successfully!  \${NC}"
echo -e "\${PURPLE}========================================\${NC}"
echo
print_success "All selected applications have been installed"
print_status "You may need to restart your terminal or run 'source ~/.zshrc' or 'source ~/.bashrc' for some changes to take effect"
echo
print_status "Script execution completed at $(date)"
`;
}

export function generateReadme(config: ScriptConfig): string {
  const { os, selectedApps } = config;
  const selectedAppData = APPS.filter((app) => selectedApps.includes(app.id));

  const osName = {
    macos: "macOS",
    ubuntu: "Ubuntu/Debian",
    fedora: "Fedora",
    arch: "Arch Linux",
  }[os];

  return `# Installation Script for ${osName}

This script was generated by **My Scripts UI** and will install the following applications and tools on your ${osName} system.

## Selected Applications

${selectedAppData
  .map((app) => `- **${app.name}** - ${app.description}`)
  .join("\n")}

## Prerequisites

### ${osName}
${
  os === "macos"
    ? `- macOS 10.15 or later
- Command Line Tools for Xcode (will be installed automatically if needed)
- Administrator privileges`
    : os === "ubuntu"
    ? `- Ubuntu 18.04 or later / Debian 10 or later
- sudo privileges
- Internet connection`
    : os === "fedora"
    ? `- Fedora 32 or later
- sudo privileges
- Internet connection`
    : `- Arch Linux (up to date)
- sudo privileges
- Internet connection`
}

## Usage

1. **Download the script:**
   \`\`\`bash
   curl -O https://your-domain.com/install-script.sh
   \`\`\`

2. **Make it executable:**
   \`\`\`bash
   chmod +x install-script.sh
   \`\`\`

3. **Run the script:**
   \`\`\`bash
   ./install-script.sh
   \`\`\`

## What the Script Does

1. **System Update**: Updates your package manager and system packages
2. **Package Manager Setup**: Installs required package managers (Homebrew for macOS, yay for Arch Linux)
3. **Application Installation**: Installs all selected applications using the appropriate package manager
4. **Configuration**: Sets up configuration files and environment variables as needed
${
  config.options.installOhMyZsh
    ? "5. **Oh My Zsh Setup**: Installs Oh My Zsh with Powerlevel10k theme and useful plugins"
    : ""
}

## Package Managers Used

${
  os === "macos"
    ? `- **Homebrew**: Primary package manager for macOS
- **Homebrew Cask**: For GUI applications`
    : os === "ubuntu"
    ? `- **APT**: Default package manager for Ubuntu/Debian
- **Snap**: Universal package manager
- **Direct downloads**: For applications not available in repositories`
    : os === "fedora"
    ? `- **DNF**: Default package manager for Fedora
- **Flatpak**: Universal package manager
- **Direct downloads**: For applications not available in repositories`
    : `- **Pacman**: Default package manager for Arch Linux
- **Yay**: AUR helper for community packages
- **Direct downloads**: For applications not available in repositories`
}

## Post-Installation

After the script completes:

1. **Restart your terminal** or run:
   \`\`\`bash
   source ~/.zshrc    # if using zsh
   source ~/.bashrc   # if using bash
   \`\`\`

2. **Verify installations** by running:
   \`\`\`bash
   # Check installed applications
   ${selectedAppData
     .filter((app) => app.checkInstall)
     .map((app) => app.checkInstall)
     .slice(0, 3)
     .join("\n   ")}
   \`\`\`

3. **Configure applications** as needed (some may require initial setup)

## Troubleshooting

### Common Issues

- **Permission denied**: Make sure you have sudo privileges
- **Network errors**: Check your internet connection
- **Package conflicts**: Some packages may conflict with existing installations

### Getting Help

- Check the application's official documentation
- Review the script output for specific error messages
- Ensure your system meets the prerequisites

### Manual Installation

If any application fails to install automatically, you can install it manually:

${selectedAppData
  .slice(0, 3)
  .map((app) => {
    const installCmd = app.install[os];
    if (installCmd && 'homebrew' in installCmd && installCmd.homebrew)
      return `- ${app.name}: \`brew install ${installCmd.homebrew}\``;
    if (installCmd && 'cask' in installCmd && installCmd.cask)
      return `- ${app.name}: \`brew install --cask ${installCmd.cask}\``;
    if (installCmd && 'apt' in installCmd && installCmd.apt)
      return `- ${app.name}: \`sudo apt install ${installCmd.apt}\``;
    if (installCmd && 'dnf' in installCmd && installCmd.dnf)
      return `- ${app.name}: \`sudo dnf install ${installCmd.dnf}\``;
    if (installCmd && 'pacman' in installCmd && installCmd.pacman)
      return `- ${app.name}: \`sudo pacman -S ${installCmd.pacman}\``;
    return `- ${app.name}: Check official documentation`;
  })
  .join("\n")}

## Security Note

Always review scripts before running them on your system. This script:
- Only installs applications from official sources
- Uses standard package managers
- Does not modify system files unnecessarily
- Creates backups of configuration files

## Generated by My Scripts UI

This script was automatically generated by [My Scripts UI](https://your-domain.com).
Generated on: ${new Date().toLocaleString()}
Target OS: ${osName}
`;
}
